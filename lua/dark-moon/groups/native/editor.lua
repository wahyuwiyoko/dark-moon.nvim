local C = require("dark-moon.colors")
local U = require("dark-moon.utils.colors")

local M = {}

M.get = function ()
  return {
    -- See :help highlight-groups
    ColorColumn = { bg = C.bg.light },
    Conceal = {},
    Cursor = { fg = C.bg.dark, bg = C.yellow.base },
    CurSearch = {},
    lCursor = {},
    CursorIM = {},
    CursorColumn = {},
    CursorLine = { bg = C.bg.base },
    Directory = { fg = C.blue.base },
    DiffAdd = { fg = C.green.base },
    DiffChange = { fg = C.yellow.base },
    DiffDelete = { fg = C.red.base },
    DiffText = { fg = C.blue.base },
    EndOfBuffer = { bg = C.bg.dark, fg = C.bg.dark },
    TermCursor = { bg = C.white, fg = C.bg.dark },
    TermCursorNC = {},
    ErrorMsg = { fg = C.red.base },
    VertSplit = { bg = C.bg.dark, fg = C.bg.base },
    Folded = { fg = C.fg.dark },
    FoldColumn = { fg = C.yellow.base },
    SignColumn = { fg = C.yellow.base },
    IncSearch = { bg = C.yellow.base, fg = C.bg.base },
    Substitute = { bg = C.blue.base, fg = C.bg.base },
    LineNr = { fg = C.fg.dark },
    LineNrAbove = {},
    LineNrBelow = {},
    CursorLineNr = { fg = C.fg.base },
    CursorLineFold = {},
    CursorLineSign = {},
    MatchParen = { fg = C.cyan.base },
    ModeMsg = {},
    MsgArea = {},
    MsgSeparator = {},
    MoreMsg = {},
    NonText = {},
    Normal = { fg = C.fg.light, bg = C.bg.dark },
    NormalFloat = { bg = C.bg.dark },
    FloatBorder = { fg = C.bg.light },
    FloatTitle = { bg = C.bg.dark, fg = C.fg.light },
    NormalNC = {},
    Pmenu = { bg = C.grey.dark, fg = C.fg.light },
    PmenuSel = { bg = C.cyan.base, fg = C.bg.lighter },
    PmenuKind = {},
    PmenuKindSel = {},
    PmenuExtra = {},
    PmenuExtraSel = {},
    PmenuSbar = { bg = C.bg.lighter },
    PmenuThumb = { bg = C.fg.base },
    Question = {},
    QuickFixLine = {},
    Search = { bg = C.hollow.base },
    SpecialKey = { bg = C.bg.light },
    SpellBad = { undercurl = true, sp = C.red.base },
    SpellCap = { undercurl = true, sp = C.yellow.base },
    SpellLocal = { undercurl = true, sp = C.orange.base },
    SpellRare = { undercurl = true, sp = C.blue.base },
    StatusLine = {},
    StatusLineNC = {},
    TabLine = { bg = C.bg.dark, fg = C.fg.light },
    TabLineFill = { bg = C.bg.dark, fg = C.fg.light },
    TabLineSel = { bg = C.cyan.base, fg = C.bg.dark },
    Title = { fg = C.green.base },
    Visual = { bg = C.hollow.lighter },
    VisualNOS = { bg = C.hollow.lighter },
    WarningMsg = { fg = C.yellow.base },
    Whitespace = { bg = C.yellow.base },
    WinSeparator = { fg = C.bg.base },
    WildMenu = {},
    WinBar = {},
    WinBarNC = {},

    -- See :help lsp-highlight
    LspReferenceText = {},
    LspReferenceRead = {},
    LspReferenceWrite = {},
    LspCodeLens = {},
    LspCodeLensSeparator = {},
    LspSignatureActiveParameter = {},

    -- See :help lsp-semantic-highlight
    ["@lsp.type.class"] = {},
    ["@lsp.type.decorator"] = {},
    ["@lsp.type.enum"] = {},
    ["@lsp.type.enumMember"] = {},
    ["@lsp.type.function"] = {},
    ["@lsp.type.interface"] = {},
    ["@lsp.type.macro"] = {},
    ["@lsp.type.method"] = {},
    ["@lsp.type.namespace"] = {},
    ["@lsp.type.parameter"] = {},
    ["@lsp.type.property"] = {},
    ["@lsp.type.struct"] = {},
    ["@lsp.type.type"] = {},
    ["@lsp.type.typeParameter"] = {},
    ["@lsp.type.variable"] = {},

    -- See :help diagnostic-highlight
    DiagnosticError = { fg = C.red.base, bg = U.darken(C.red.base, 0.1) },
    DiagnosticWarn = { fg = C.orange.base, bg = U.darken(C.orange.base, 0.1) },
    DiagnosticInfo = { fg = C.yellow.base, bg = U.darken(C.yellow.base, 0.1) },
    DiagnosticHint = { fg = C.green.base, bg = U.darken(C.green.base, 0.1) },
    DiagnosticOk = { fg = C.green.high, bg = U.darken(C.green.high, 0.1) },
    DiagnosticVirtualTextError = {},
    DiagnosticVirtualTextWarn = {},
    DiagnosticVirtualTextInfo = {},
    DiagnosticVirtualTextHint = {},
    DiagnosticVirtualTextOk = {},
    DiagnosticUnderlineError = { undercurl = true, sp = C.red.base },
    DiagnosticUnderlineWarn = { undercurl = true, sp = C.orange.base },
    DiagnosticUnderlineInfo = { undercurl = true, sp = C.yellow.base },
    DiagnosticUnderlineHint = { undercurl = true, sp = C.green.base },
    DiagnosticUnderlineOk = { undercurl = true, sp = C.green.high },
    DiagnosticFloatingError = {},
    DiagnosticFloatingWarn = {},
    DiagnosticFloatingInfo = {},
    DiagnosticFloatingHint = {},
    DiagnosticFloatingOk = {},
    DiagnosticSignError = {},
    DiagnosticSignWarn = {},
    DiagnosticSignInfo = {},
    DiagnosticSignHint = {},
    DiagnosticSignOk = {},
    DiagnosticDeprecated = {},
    DiagnosticUnnecessary = {},

    healthError = {},
    healthSuccess = {},
    healthWarning = {},
    healthHelp = {}
  }
end

return M
